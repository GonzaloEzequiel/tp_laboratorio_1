/*
 * calculos.h
 *
 *  Created on: 15 abr. 2021
 *      Author: Pérez Gonzalo Ezequiel 1E
 */

#ifndef CALCULOS_H_
#define CALCULOS_H_

/** \brief CALCULA LA SUMA ENTRE DOS VALORES PASADOS POR REFERENCIA, Y ESCRIBE EN LA DIRECCION DE MEMORIA DEL RESULTADO
 *
 * \param num1 float* DIRECCION DE MEMORIA DEL PRIMER OPERADOR
 * \param num2 float* DIRECCION DE MEMORIA DEL SEGUNDO OPERADOR
 * \param res float* DIRECCION DE MEMORIA DEL RESULTADO DE LA SUMA
 * \param flags int BANDERA DE INGRESO DE OPERADORES, VERIFICADOR DE ERROR
 *
 * \return int '0' SI NO SE PRODUJO UN ERROR Y SE PUDO REALIZAR LA SUMA ; '1' SI SE PRODUJO UN ERROR Y NO SE PUDO REALIZAR LA SUMA
 *
 */
int suma(float* num1, float* num2, float* res, int flags);


/** \brief CALCULA LA RESTA ENTRE DOS VALORES PASADOS POR REFERENCIA, Y ESCRIBE EN LA DIRECCION DE MEMORIA DEL RESULTADO
 *
 * \param num1 float* DIRECCION DE MEMORIA DEL PRIMER OPERADOR
 * \param num2 float* DIRECCION DE MEMORIA DEL SEGUNDO OPERADOR
 * \param res float* DIRECCION DE MEMORIA DEL RESULTADO DE LA RESTA
 * \param flags int BANDERA DE INGRESO DE OPERADORES, VERIFICADOR DE ERROR
 *
 * \return int '0' SI NO SE PRODUJO UN ERROR Y SE PUDO REALIZAR LA RESTA ; '1' SI SE PRODUJO UN ERROR Y NO SE PUDO REALIZAR LA RESTA
 *
 */
int resta(float* num1, float* num2, float* res, int flags);


/** \brief CALCULA EL PRODUCTO ENTRE DOS VALORES PASADOS POR REFERENCIA, Y ESCRIBE EN LA DIRECCION DE MEMORIA DEL RESULTADO
 *
 * \param num1 float* DIRECCION DE MEMORIA DEL PRIMER OPERADOR
 * \param num2 float* DIRECCION DE MEMORIA DEL SEGUNDO OPERADOR
 * \param res float* DIRECCION DE MEMORIA DEL RESULTADO DEL PRODUCTO
 * \param flags int BANDERA DE INGRESO DE OPERADORES, VERIFICADOR DE ERROR
 *
 * \return int '0' SI NO SE PRODUJO UN ERROR Y SE PUDO REALIZAR EL PRODUCTO ; '1' SI SE PRODUJO UN ERROR Y NO SE PUDO REALIZAR EL PRODUCTO
 *
 */
int producto(float* num1, float* num2, float* res, int flags);


/** \brief CALCULA LA DIVISION ENTRE DOS VALORES PASADOS POR REFERENCIA, Y ESCRIBE EN LA DIRECCION DE MEMORIA DEL RESULTADO
 *
 * \param num1 float* DIRECCION DE MEMORIA DEL PRIMER OPERADOR
 * \param num2 float* DIRECCION DE MEMORIA DEL SEGUNDO OPERADOR
 * \param res float* DIRECCION DE MEMORIA DEL RESULTADO DE LA DIVISION
 * \param flags int BANDERA DE INGRESO DE OPERADORES, VERIFICADOR DE ERROR
 *
 * \return int '0' SI NO SE PRODUJO UN ERROR Y SE PUDO REALIZAR LA DIVISION ; '1' SI SE PRODUJO UN ERROR Y NO SE PUDO REALIZAR LA DIVISION (EJ: DENOMINADOR = 0)
 *
 */
int division(float* num1, float* num2, float* res, int flags);


/** \brief CALCULA EL FACTORIAL DE LA PARTE ENTERA DE UN NUMERO PASADO POR REFERENCIA, Y ESCRIBE EN LA DIRECCION DE MEMORIA DEL RESULTADO
 *
 * \param num float* DIRECCION DE MEMORIA DEL OPERADOR
 * \param res long long int* DIRECCION DE MEMORIA DEL RESULTADO DEL FACTORIAL
 * \param flag int BANDERA DE INGRESO DE OPERADOR, VERIFICADOR DE ERROR
 *
 * \return int '0' SI NO SE PRODUJO UN ERROR Y SE PUDO REALIZAR EL FACTORIAL ; '1' SI SE PRODUJO UN ERROR Y NO SE PUDO REALIZAR LA DIVISION (EJ: OPERADOR < 0)
 *
 */
int factorial(float* num, long long int* res, int flag);

#endif /* CALCULOS_H_ */
